# Ávila DevOps SaaS - Dockerfile Base
# Multi-stage build otimizado para aplicações Django

# Stage 1: Builder (compilação)
FROM python:3.11-slim as builder

# Instalar dependências de sistema necessárias para compilação
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    libffi-dev \
    libssl-dev \
    libjpeg-dev \
    libpng-dev \
    zlib1g-dev \
    libfreetype6-dev \
    liblcms2-dev \
    libopenjp2-7-dev \
    libtiff5-dev \
    libwebp-dev \
    && rm -rf /var/lib/apt/lists/*

# Definir variáveis de ambiente
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Criar usuário não-root
RUN groupadd -g 1000 django && useradd -u 1000 -g django django

# Definir diretório de trabalho
WORKDIR /app

# Copiar arquivos de dependências
COPY requirements*.txt ./

# Instalar dependências Python
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 2: Production (runtime)
FROM python:3.11-slim as production

# Instalar apenas dependências de runtime
RUN apt-get update && apt-get install -y \
    libpq5 \
    libffi7 \
    libssl3 \
    libjpeg62-turbo \
    libpng16-16 \
    zlib1g \
    libfreetype6 \
    liblcms2-2 \
    libopenjp2-7 \
    libtiff5 \
    libwebp6 \
    && rm -rf /var/lib/apt/lists/*

# Criar usuário não-root
RUN groupadd -g 1000 django && useradd -u 1000 -g django django

# Definir variáveis de ambiente para produção
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/home/django/.local/bin:${PATH}" \
    DJANGO_SETTINGS_MODULE=core.settings \
    ENVIRONMENT=production

# Definir diretório de trabalho
WORKDIR /app

# Copiar dependências instaladas do builder
COPY --from=builder /home/django/.local /home/django/.local

# Criar diretórios necessários
RUN mkdir -p /app/staticfiles /app/media /app/logs && \
    chown -R django:django /app

# Copiar código da aplicação
COPY --chown=django:django . .

# Mudar para usuário não-root
USER django

# Expor porta
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health/ || exit 1

# Comando padrão
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--chdir", "/app", "core.wsgi:application"]

# Stage 3: Development (desenvolvimento)
FROM production as development

# Instalar ferramentas de desenvolvimento
USER root
RUN apt-get update && apt-get install -y \
    git \
    vim \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Instalar dependências de desenvolvimento
COPY requirements-dev.txt ./
RUN pip install --no-cache-dir --user -r requirements-dev.txt

# Voltar para usuário django
USER django

# Comando para desenvolvimento
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
