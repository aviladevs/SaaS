#!/bin/bash
# √Åvila DevOps SaaS - Easy Deploy Script
# Script para facilitar deploy para funcion√°rios

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√£o para log
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $*${NC}"
}

# Fun√ß√£o para sucesso
success() {
    echo -e "${GREEN}‚úÖ $*${NC}"
}

# Fun√ß√£o para erro
error() {
    echo -e "${RED}‚ùå $*${NC}"
}

# Fun√ß√£o para warning
warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $*${NC}"
}

# Verificar pr√©-requisitos
check_prerequisites() {
    log "Verificando pr√©-requisitos..."

    # Verificar se est√° no diret√≥rio correto
    if [ ! -f "docker-compose.prod.yml" ]; then
        error "Execute este script a partir do diret√≥rio raiz do projeto SaaS"
        exit 1
    fi

    # Verificar vari√°veis de ambiente
    if [ ! -f ".env" ]; then
        warning "Arquivo .env n√£o encontrado. Usando configura√ß√µes padr√£o."
        cp .env.example .env
    fi

    success "Pr√©-requisitos verificados"
}

# Menu interativo para funcion√°rios
show_menu() {
    echo ""
    echo "üöÄ √Åvila DevOps SaaS - Deploy F√°cil"
    echo "==================================="
    echo ""
    echo "Escolha uma op√ß√£o:"
    echo ""
    echo "1) üöÄ Deploy Completo (Todos os servi√ßos)"
    echo "2) üéØ Deploy Servi√ßo Espec√≠fico"
    echo "3) üë• Criar Novo Tenant"
    echo "4) üìä Verificar Status dos Servi√ßos"
    echo "5) üîß Backup/Restore"
    echo "6) üìà Ver M√©tricas e Monitoramento"
    echo "7) üõ†Ô∏è  Ferramentas de Desenvolvimento"
    echo "8) üìö Ajuda e Documenta√ß√£o"
    echo ""
    echo "0) Sair"
    echo ""
    read -p "Digite sua op√ß√£o: " choice

    case $choice in
        1) deploy_all ;;
        2) deploy_specific ;;
        3) create_tenant ;;
        4) check_status ;;
        5) backup_restore ;;
        6) show_metrics ;;
        7) dev_tools ;;
        8) show_help ;;
        0) exit 0 ;;
        *) error "Op√ß√£o inv√°lida!"; show_menu ;;
    esac
}

# Deploy de todos os servi√ßos
deploy_all() {
    log "üöÄ Iniciando deploy completo..."

    # Verificar se h√° mudan√ßas no Git
    if git diff --quiet HEAD; then
        warning "Nenhuma mudan√ßa detectada. Continuar mesmo assim? (s/n)"
        read -r response
        if [[ ! "$response" =~ ^[Ss]$ ]]; then
            show_menu
        fi
    fi

    # Executar testes
    log "Executando testes..."
    make test

    # Build das imagens
    log "Buildando imagens Docker..."
    make build

    # Deploy para produ√ß√£o
    log "Fazendo deploy para produ√ß√£o..."
    make deploy-prod

    # Verificar sa√∫de
    log "Verificando sa√∫de dos servi√ßos..."
    make health

    success "Deploy completo realizado com sucesso!"
    echo ""
    echo "üåê URLs dispon√≠veis:"
    echo "   Landing Page: https://aviladevops.com.br"
    echo "   Sistema: https://sistema.aviladevops.com.br"
    echo "   Fiscal: https://fiscal.aviladevops.com.br"
    echo "   Cl√≠nica: https://clinica.aviladevops.com.br"
    echo "   Admin: https://admin.aviladevops.com.br"
    echo ""
    read -p "Pressione Enter para continuar..."
    show_menu
}

# Deploy de servi√ßo espec√≠fico
deploy_specific() {
    echo ""
    echo "üéØ Deploy de Servi√ßo Espec√≠fico"
    echo "==============================="
    echo ""
    echo "Escolha o servi√ßo para deploy:"
    echo "1) Landing Page"
    echo "2) Sistema de Reciclagem"
    echo "3) Sistema Fiscal"
    echo "4) Cl√≠nica Management"
    echo "5) Aplica√ß√£o Principal (Admin)"
    echo ""
    read -p "Digite sua op√ß√£o: " service_choice

    case $service_choice in
        1) service="landing-page" ;;
        2) service="sistema" ;;
        3) service="fiscal" ;;
        4) service="clinica" ;;
        5) service="app-aviladevops" ;;
        *) error "Op√ß√£o inv√°lida!"; deploy_specific ;;
    esac

    log "Fazendo deploy do servi√ßo: $service..."

    # Deploy espec√≠fico do servi√ßo
    # (Aqui voc√™ implementaria a l√≥gica espec√≠fica)

    success "Deploy do servi√ßo $service realizado com sucesso!"
    read -p "Pressione Enter para continuar..."
    show_menu
}

# Criar novo tenant
create_tenant() {
    log "üë• Criando novo tenant..."

    read -p "Nome do cliente/empresa: " tenant_name
    read -p "Dom√≠nio personalizado (ex: cliente.aviladevops.com.br): " tenant_domain
    read -p "Email do administrador: " admin_email

    # Executar script de cria√ß√£o de tenant
    python scripts/tenant_management.py create \
        --name "$tenant_name" \
        --domain "$tenant_domain" \
        --owner-email "$admin_email"

    success "Tenant '$tenant_name' criado com sucesso!"
    echo ""
    echo "üîó Acesso do cliente:"
    echo "   URL: https://$tenant_domain"
    echo "   Email admin: $admin_email"
    echo ""
    read -p "Pressione Enter para continuar..."
    show_menu
}

# Verificar status
check_status() {
    log "üìä Verificando status dos servi√ßos..."

    echo ""
    echo "=== STATUS DOS SERVI√áOS ==="
    echo ""

    # Verificar sa√∫de dos servi√ßos
    services=("landing-page" "sistema" "fiscal" "clinica" "app-aviladevops")
    for service in "${services[@]}"; do
        echo "üîç Verificando $service..."
        # Implementar verifica√ß√£o espec√≠fica
    done

    echo ""
    echo "=== M√âTRICAS ==="
    echo "Uptime: $(uptime | awk '{print $1}')"
    echo "Mem√≥ria usada: $(free | awk 'NR==2{printf "%.1f%%", $3*100/$2 }')"
    echo "Disco usado: $(df / | awk 'NR==2{print $5}')"
    echo ""

    read -p "Pressione Enter para continuar..."
    show_menu
}

# Fun√ß√£o de backup/restore
backup_restore() {
    echo ""
    echo "üíæ Backup e Restore"
    echo "=================="
    echo ""
    echo "1) Criar backup completo"
    echo "2) Criar backup de tenant espec√≠fico"
    echo "3) Restaurar backup"
    echo "4) Listar backups dispon√≠veis"
    echo ""
    read -p "Digite sua op√ß√£o: " backup_choice

    case $backup_choice in
        1)
            log "Criando backup completo..."
            make backup
            ;;
        2)
            read -p "Nome do tenant: " tenant_name
            python scripts/tenant_management.py backup --name "$tenant_name"
            ;;
        3)
            echo "Backups dispon√≠veis:"
            ls -la backups/ 2>/dev/null || echo "Nenhum backup encontrado"
            read -p "Nome do arquivo de backup: " backup_file
            # Implementar restore
            ;;
        4)
            echo "Backups dispon√≠veis:"
            ls -la backups/ 2>/dev/null || echo "Nenhum backup encontrado"
            ;;
        *)
            error "Op√ß√£o inv√°lida!"
            ;;
    esac

    read -p "Pressione Enter para continuar..."
    show_menu
}

# Mostrar m√©tricas
show_metrics() {
    log "üìà M√©tricas e Monitoramento"

    echo ""
    echo "=== MONITORAMENTO EM TEMPO REAL ==="
    echo ""

    # M√©tricas b√°sicas
    echo "üî• Servi√ßos ativos: $(docker ps | wc -l)"
    echo "üíæ Uso de disco: $(df / | awk 'NR==2{print $5}')"
    echo "üß† Mem√≥ria usada: $(free | awk 'NR==2{printf "%.1f%%", $3*100/$2 }')"
    echo "üåê Conex√µes ativas: $(netstat -tuln | wc -l)"
    echo ""

    # Logs recentes
    echo "=== LOGS RECENTES ==="
    docker-compose -f docker-compose.prod.yml logs --tail=10
    echo ""

    read -p "Pressione Enter para continuar..."
    show_menu
}

# Ferramentas de desenvolvimento
dev_tools() {
    echo ""
    echo "üõ†Ô∏è  Ferramentas de Desenvolvimento"
    echo "================================="
    echo ""
    echo "1) Executar testes"
    echo "2) Verificar qualidade do c√≥digo"
    echo "3) Limpar ambiente"
    echo "4) Reset banco de dados"
    echo "5) Ver logs detalhados"
    echo ""
    read -p "Digite sua op√ß√£o: " dev_choice

    case $dev_choice in
        1) make test ;;
        2) make lint ;;
        3) make clean ;;
        4) make migrate ;;
        5) make logs ;;
        *) error "Op√ß√£o inv√°lida!" ;;
    esac

    read -p "Pressione Enter para continuar..."
    show_menu
}

# Ajuda
show_help() {
    echo ""
    echo "üìö Ajuda - Deploy F√°cil SaaS"
    echo "==========================="
    echo ""
    echo "Este script facilita as opera√ß√µes do dia-a-dia para funcion√°rios:"
    echo ""
    echo "üîß OPERA√á√ïES COMUNS:"
    echo "‚Ä¢ Deploy completo: Atualiza todos os servi√ßos"
    echo "‚Ä¢ Deploy espec√≠fico: Atualiza apenas um servi√ßo"
    echo "‚Ä¢ Criar tenant: Configura novo cliente automaticamente"
    echo "‚Ä¢ Status: Verifica sa√∫de de todos os servi√ßos"
    echo ""
    echo "üìä MONITORAMENTO:"
    echo "‚Ä¢ M√©tricas em tempo real"
    echo "‚Ä¢ Logs recentes"
    echo "‚Ä¢ Health checks autom√°ticos"
    echo ""
    echo "üõ†Ô∏è DESENVOLVIMENTO:"
    echo "‚Ä¢ Testes automatizados"
    echo "‚Ä¢ Verifica√ß√£o de qualidade"
    echo "‚Ä¢ Limpeza de ambiente"
    echo ""
    echo "üí° DICAS:"
    echo "‚Ä¢ Sempre execute testes antes de deploy"
    echo "‚Ä¢ Monitore m√©tricas ap√≥s deploy"
    echo "‚Ä¢ Use backup antes de mudan√ßas cr√≠ticas"
    echo ""
    read -p "Pressione Enter para continuar..."
    show_menu
}

# Fun√ß√£o principal
main() {
    echo ""
    echo "üöÄ √Åvila DevOps SaaS - Deploy F√°cil"
    echo "==================================="
    echo ""

    # Verificar se usu√°rio tem permiss√µes
    if [ "$EUID" -eq 0 ]; then
        warning "Executando como root. Recomendado usar usu√°rio normal com sudo."
    fi

    check_prerequisites
    show_menu
}

# Executar
main "$@"
