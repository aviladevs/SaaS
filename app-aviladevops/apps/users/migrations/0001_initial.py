# Generated by Django 5.2.7 on 2025-10-04 07:57

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Nome')),
                ('description', models.TextField(blank=True, verbose_name='Descrição')),
                ('is_system', models.BooleanField(default=False, verbose_name='Role do sistema')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'ordering': ['tenant', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nome')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
                ('domain', models.CharField(max_length=255, unique=True, verbose_name='Domínio')),
                ('plan', models.CharField(choices=[('basic', 'Basic'), ('pro', 'Professional'), ('enterprise', 'Enterprise')], default='basic', max_length=20, verbose_name='Plano')),
                ('status', models.CharField(choices=[('active', 'Active'), ('suspended', 'Suspended'), ('trial', 'Trial'), ('inactive', 'Inactive')], default='trial', max_length=20, verbose_name='Status')),
                ('max_users', models.IntegerField(default=10, verbose_name='Máximo de usuários')),
                ('storage_limit', models.IntegerField(default=10, verbose_name='Limite de armazenamento (GB)')),
                ('owner_email', models.EmailField(max_length=254, verbose_name='Email do proprietário')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('trial_ends_at', models.DateTimeField(blank=True, null=True, verbose_name='Trial termina em')),
                ('settings', models.JSONField(blank=True, default=dict, verbose_name='Configurações')),
            ],
            options={
                'verbose_name': 'Tenant',
                'verbose_name_plural': 'Tenants',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Telefone')),
                ('company', models.CharField(blank=True, max_length=100, verbose_name='Empresa')),
                ('position', models.CharField(blank=True, max_length=50, verbose_name='Cargo')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='Bio')),
                ('address', models.CharField(blank=True, max_length=200, verbose_name='Endereço')),
                ('city', models.CharField(blank=True, max_length=50, verbose_name='Cidade')),
                ('state', models.CharField(blank=True, max_length=2, verbose_name='Estado')),
                ('zip_code', models.CharField(blank=True, max_length=10, verbose_name='CEP')),
                ('country', models.CharField(default='Brasil', max_length=50, verbose_name='País')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='Avatar')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('linkedin', models.URLField(blank=True, verbose_name='LinkedIn')),
                ('github', models.URLField(blank=True, verbose_name='GitHub')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Verificado')),
                ('verification_token', models.CharField(blank=True, max_length=100, verbose_name='Token de verificação')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='Último IP de login')),
                ('newsletter_subscribed', models.BooleanField(default=True, verbose_name='Inscrito na newsletter')),
                ('marketing_emails', models.BooleanField(default=True, verbose_name='Emails de marketing')),
                ('language', models.CharField(default='pt-br', max_length=10, verbose_name='Idioma')),
                ('timezone', models.CharField(default='America/Sao_Paulo', max_length=50, verbose_name='Fuso horário')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('roles', models.ManyToManyField(blank=True, related_name='users', to='users.role', verbose_name='Roles')),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='users.tenant', verbose_name='Tenant')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BackupCode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=12, unique=True, verbose_name='Código')),
                ('used', models.BooleanField(default=False, verbose_name='Usado')),
                ('used_at', models.DateTimeField(blank=True, null=True, verbose_name='Usado em')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='backup_codes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Código de backup',
                'verbose_name_plural': 'Códigos de backup',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='role',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='users.tenant'),
        ),
        migrations.CreateModel(
            name='TOTPDevice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Nome do dispositivo')),
                ('secret', models.CharField(max_length=32, verbose_name='Segredo')),
                ('confirmed', models.BooleanField(default=False, verbose_name='Confirmado')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('last_used_at', models.DateTimeField(blank=True, null=True, verbose_name='Último uso')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='totp_devices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dispositivo TOTP',
                'verbose_name_plural': 'Dispositivos TOTP',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserInvitation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('token', models.CharField(max_length=64, unique=True, verbose_name='Token')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('expires_at', models.DateTimeField(verbose_name='Expira em')),
                ('accepted_at', models.DateTimeField(blank=True, null=True, verbose_name='Aceito em')),
                ('invited_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_invitations', to=settings.AUTH_USER_MODEL, verbose_name='Convidado por')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='users.role')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='users.tenant')),
            ],
            options={
                'verbose_name': 'Convite de usuário',
                'verbose_name_plural': 'Convites de usuários',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('resource', models.CharField(choices=[('user', 'User Management'), ('tenant', 'Tenant Management'), ('service', 'Service Management'), ('project', 'Project Management'), ('blog', 'Blog Management'), ('contact', 'Contact Management'), ('analytics', 'Analytics'), ('settings', 'Settings')], max_length=50, verbose_name='Recurso')),
                ('action', models.CharField(choices=[('create', 'Create'), ('read', 'Read'), ('update', 'Update'), ('delete', 'Delete'), ('list', 'List'), ('export', 'Export')], max_length=20, verbose_name='Ação')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to='users.role')),
            ],
            options={
                'verbose_name': 'Permissão',
                'verbose_name_plural': 'Permissões',
                'ordering': ['role', 'resource', 'action'],
                'unique_together': {('role', 'resource', 'action')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='role',
            unique_together={('tenant', 'name')},
        ),
        migrations.CreateModel(
            name='OAuthProvider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('provider', models.CharField(choices=[('google', 'Google Workspace'), ('microsoft', 'Microsoft Azure AD'), ('github', 'GitHub'), ('gitlab', 'GitLab'), ('saml', 'SAML 2.0')], max_length=20, verbose_name='Provedor')),
                ('client_id', models.CharField(max_length=255, verbose_name='Client ID')),
                ('client_secret', models.CharField(max_length=255, verbose_name='Client Secret')),
                ('saml_metadata_url', models.URLField(blank=True, verbose_name='SAML Metadata URL')),
                ('enabled', models.BooleanField(default=True, verbose_name='Habilitado')),
                ('auto_create_users', models.BooleanField(default=False, verbose_name='Auto-criar usuários')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('default_role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='oauth_providers', to='users.role', verbose_name='Role padrão')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='oauth_providers', to='users.tenant')),
            ],
            options={
                'verbose_name': 'Provedor OAuth',
                'verbose_name_plural': 'Provedores OAuth',
                'ordering': ['tenant', 'provider'],
                'unique_together': {('tenant', 'provider')},
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('login_failed', 'Login Failed'), ('password_change', 'Password Change'), ('password_reset', 'Password Reset'), ('mfa_enabled', 'MFA Enabled'), ('mfa_disabled', 'MFA Disabled'), ('user_created', 'User Created'), ('user_updated', 'User Updated'), ('user_deleted', 'User Deleted'), ('role_assigned', 'Role Assigned'), ('role_removed', 'Role Removed'), ('invitation_sent', 'Invitation Sent'), ('invitation_accepted', 'Invitation Accepted')], max_length=50, verbose_name='Evento')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Endereço IP')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('details', models.JSONField(blank=True, default=dict, verbose_name='Detalhes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='audit_logs', to='users.tenant')),
            ],
            options={
                'verbose_name': 'Log de auditoria',
                'verbose_name_plural': 'Logs de auditoria',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['tenant', '-created_at'], name='users_audit_tenant__ec2593_idx'), models.Index(fields=['user', '-created_at'], name='users_audit_user_id_949877_idx'), models.Index(fields=['event', '-created_at'], name='users_audit_event_8757dc_idx')],
            },
        ),
    ]
