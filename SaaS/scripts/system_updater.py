#!/usr/bin/env python3
"""
Script de Atualiza√ß√£o Autom√°tica do Sistema
Atualiza depend√™ncias, executa migra√ß√µes e faz deploy seguro
"""

import os
import sys
import subprocess
import logging
from pathlib import Path
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('update.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class SystemUpdater:
    """Atualizador autom√°tico do sistema"""

    def __init__(self, project_root=None):
        self.project_root = Path(project_root) if project_root else Path(__file__).parent.parent
        self.backup_service = None

    def update_dependencies(self):
        """Atualizar depend√™ncias Python"""
        logger.info("üîÑ Atualizando depend√™ncias Python...")
        
        try:
            # Backup antes da atualiza√ß√£o
            self._create_backup_if_available()
            
            # Atualizar pip
            subprocess.run([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'], 
                         check=True)
            
            # Instalar depend√™ncias atualizadas
            requirements_file = self.project_root / 'app-aviladevops' / 'requirements.txt'
            if requirements_file.exists():
                subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 
                              str(requirements_file), '--upgrade'], check=True)
            
            logger.info("‚úÖ Depend√™ncias Python atualizadas com sucesso")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå Erro ao atualizar depend√™ncias: {e}")
            return False

    def update_frontend_dependencies(self):
        """Atualizar depend√™ncias do frontend (Node.js)"""
        logger.info("üîÑ Atualizando depend√™ncias do frontend...")
        
        try:
            clinica_dir = self.project_root / 'clinica'
            if clinica_dir.exists() and (clinica_dir / 'package.json').exists():
                # Mudar para diret√≥rio da cl√≠nica
                original_cwd = os.getcwd()
                os.chdir(clinica_dir)
                
                try:
                    # Atualizar depend√™ncias
                    subprocess.run(['npm', 'update'], check=True)
                    subprocess.run(['npm', 'audit', 'fix'], check=False)  # N√£o falhar se n√£o houver corre√ß√µes
                    
                    logger.info("‚úÖ Depend√™ncias do frontend atualizadas")
                    return True
                    
                finally:
                    os.chdir(original_cwd)
            else:
                logger.info("‚ÑπÔ∏è Projeto frontend n√£o encontrado, pulando atualiza√ß√£o")
                return True
                
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå Erro ao atualizar frontend: {e}")
            return False

    def run_migrations(self):
        """Executar migra√ß√µes do banco de dados"""
        logger.info("üóÑÔ∏è Executando migra√ß√µes do banco...")
        
        try:
            # Verificar migra√ß√µes pendentes
            result = subprocess.run([
                sys.executable, 'manage.py', 'showmigrations', '--plan'
            ], capture_output=True, text=True, cwd=self.project_root / 'app-aviladevops')
            
            if '[ ]' in result.stdout:  # H√° migra√ß√µes pendentes
                logger.info("üìù Migra√ß√µes pendentes encontradas, executando...")
                
                # Fazer migrations
                subprocess.run([
                    sys.executable, 'manage.py', 'makemigrations'
                ], check=True, cwd=self.project_root / 'app-aviladevops')
                
                # Executar migrations
                subprocess.run([
                    sys.executable, 'manage.py', 'migrate'
                ], check=True, cwd=self.project_root / 'app-aviladevops')
                
                logger.info("‚úÖ Migra√ß√µes executadas com sucesso")
            else:
                logger.info("‚ÑπÔ∏è Nenhuma migra√ß√£o pendente")
            
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå Erro ao executar migra√ß√µes: {e}")
            return False

    def collect_static_files(self):
        """Coletar arquivos est√°ticos"""
        logger.info("üìÅ Coletando arquivos est√°ticos...")
        
        try:
            subprocess.run([
                sys.executable, 'manage.py', 'collectstatic', '--noinput'
            ], check=True, cwd=self.project_root / 'app-aviladevops')
            
            logger.info("‚úÖ Arquivos est√°ticos coletados")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå Erro ao coletar est√°ticos: {e}")
            return False

    def run_tests(self):
        """Executar testes automatizados"""
        logger.info("üß™ Executando testes...")
        
        try:
            # Testes do backend
            result = subprocess.run([
                sys.executable, 'manage.py', 'test', '--verbosity=2'
            ], capture_output=True, text=True, cwd=self.project_root / 'app-aviladevops')
            
            if result.returncode == 0:
                logger.info("‚úÖ Todos os testes passaram")
                return True
            else:
                logger.error(f"‚ùå Testes falharam:\n{result.stdout}\n{result.stderr}")
                return False
                
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå Erro ao executar testes: {e}")
            return False

    def check_security(self):
        """Verificar vulnerabilidades de seguran√ßa"""
        logger.info("üîí Verificando seguran√ßa...")
        
        try:
            # Verificar vulnerabilidades Python
            try:
                subprocess.run(['safety', 'check'], check=True)
                logger.info("‚úÖ Verifica√ß√£o de seguran√ßa Python OK")
            except (subprocess.CalledProcessError, FileNotFoundError):
                logger.warning("‚ö†Ô∏è Safety n√£o instalado ou vulnerabilidades encontradas")
            
            # Verificar vulnerabilidades Node.js
            clinica_dir = self.project_root / 'clinica'
            if clinica_dir.exists():
                original_cwd = os.getcwd()
                os.chdir(clinica_dir)
                
                try:
                    result = subprocess.run(['npm', 'audit'], capture_output=True, text=True)
                    if 'found 0 vulnerabilities' in result.stdout:
                        logger.info("‚úÖ Verifica√ß√£o de seguran√ßa Node.js OK")
                    else:
                        logger.warning("‚ö†Ô∏è Vulnerabilidades encontradas no Node.js")
                finally:
                    os.chdir(original_cwd)
            
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro na verifica√ß√£o de seguran√ßa: {e}")
            return True  # N√£o falhar o update por isso

    def restart_services(self):
        """Reiniciar servi√ßos (se usando systemd ou docker)"""
        logger.info("üîÑ Reiniciando servi√ßos...")
        
        try:
            # Verificar se est√° rodando em Docker
            if os.path.exists('/.dockerenv'):
                logger.info("üê≥ Ambiente Docker detectado - restart autom√°tico")
                return True
            
            # Verificar se h√° servi√ßos systemd
            service_files = [
                'aviladevops-saas.service',
                'aviladevops-worker.service',
                'aviladevops-beat.service'
            ]
            
            for service in service_files:
                try:
                    subprocess.run(['systemctl', 'restart', service], 
                                 check=True, capture_output=True)
                    logger.info(f"‚úÖ Servi√ßo {service} reiniciado")
                except (subprocess.CalledProcessError, FileNotFoundError):
                    logger.info(f"‚ÑπÔ∏è Servi√ßo {service} n√£o encontrado")
            
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao reiniciar servi√ßos: {e}")
            return True  # N√£o falhar por isso

    def _create_backup_if_available(self):
        """Criar backup se o servi√ßo estiver dispon√≠vel"""
        try:
            backup_script = self.project_root / 'scripts' / 'backup_manager.py'
            if backup_script.exists():
                logger.info("üíæ Criando backup antes da atualiza√ß√£o...")
                subprocess.run([
                    sys.executable, str(backup_script), '--action', 'backup', '--type', 'db'
                ], check=True)
                logger.info("‚úÖ Backup criado")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao criar backup: {e}")

    def health_check(self):
        """Verificar sa√∫de do sistema ap√≥s atualiza√ß√£o"""
        logger.info("üè• Verificando sa√∫de do sistema...")
        
        try:
            # Verificar se o Django est√° funcionando
            result = subprocess.run([
                sys.executable, 'manage.py', 'check'
            ], capture_output=True, text=True, cwd=self.project_root / 'app-aviladevops')
            
            if result.returncode == 0:
                logger.info("‚úÖ Sistema Django OK")
            else:
                logger.error(f"‚ùå Problemas no Django: {result.stdout}")
                return False
            
            # Verificar health endpoint se dispon√≠vel
            try:
                import requests
                response = requests.get('http://localhost:8000/health/', timeout=10)
                if response.status_code == 200:
                    logger.info("‚úÖ Health endpoint OK")
                else:
                    logger.warning(f"‚ö†Ô∏è Health endpoint retornou {response.status_code}")
            except Exception:
                logger.info("‚ÑπÔ∏è Health endpoint n√£o dispon√≠vel")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro na verifica√ß√£o de sa√∫de: {e}")
            return False

    def full_update(self):
        """Executar atualiza√ß√£o completa do sistema"""
        logger.info("üöÄ Iniciando atualiza√ß√£o completa do sistema...")
        start_time = datetime.now()
        
        steps = [
            ("Atualizar depend√™ncias Python", self.update_dependencies),
            ("Atualizar depend√™ncias Frontend", self.update_frontend_dependencies),
            ("Executar migra√ß√µes", self.run_migrations),
            ("Coletar arquivos est√°ticos", self.collect_static_files),
            ("Executar testes", self.run_tests),
            ("Verificar seguran√ßa", self.check_security),
            ("Reiniciar servi√ßos", self.restart_services),
            ("Verificar sa√∫de", self.health_check),
        ]
        
        failed_steps = []
        
        for step_name, step_func in steps:
            logger.info(f"üìã {step_name}...")
            
            if not step_func():
                failed_steps.append(step_name)
                logger.error(f"‚ùå Falha em: {step_name}")
                
                # Parar em falhas cr√≠ticas
                if step_name in ["Executar migra√ß√µes", "Executar testes"]:
                    logger.error("üõë Falha cr√≠tica detectada, interrompendo atualiza√ß√£o")
                    break
        
        duration = datetime.now() - start_time
        
        if not failed_steps:
            logger.info(f"üéâ Atualiza√ß√£o completa bem-sucedida! Dura√ß√£o: {duration}")
            return True
        else:
            logger.error(f"‚ö†Ô∏è Atualiza√ß√£o conclu√≠da com falhas: {failed_steps}")
            logger.error(f"Dura√ß√£o: {duration}")
            return False


def main():
    """Fun√ß√£o principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Atualizador autom√°tico do sistema')
    parser.add_argument('--step', choices=[
        'deps', 'frontend', 'migrations', 'static', 'tests', 'security', 'restart', 'health'
    ], help='Executar apenas um passo espec√≠fico')
    parser.add_argument('--project-root', help='Caminho raiz do projeto')
    
    args = parser.parse_args()
    
    updater = SystemUpdater(args.project_root)
    
    if args.step:
        step_functions = {
            'deps': updater.update_dependencies,
            'frontend': updater.update_frontend_dependencies,
            'migrations': updater.run_migrations,
            'static': updater.collect_static_files,
            'tests': updater.run_tests,
            'security': updater.check_security,
            'restart': updater.restart_services,
            'health': updater.health_check,
        }
        
        success = step_functions[args.step]()
        sys.exit(0 if success else 1)
    else:
        # Atualiza√ß√£o completa
        success = updater.full_update()
        sys.exit(0 if success else 1)


if __name__ == '__main__':
    main()