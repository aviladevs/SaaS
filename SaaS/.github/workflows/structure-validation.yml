name: Structure Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate-structure:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install validation dependencies
      run: |
        pip install PyYAML==6.0.1

    - name: Validate project structure
      run: |
        python scripts/validate_structure.py

    - name: Check for required files
      run: |
        # Verificar arquivos essenciais na raiz
        echo "Verificando arquivos essenciais na raiz..."
        [[ -f "README.md" ]] || (echo "‚ùå README.md n√£o encontrado na raiz" && exit 1)
        [[ -f "requirements.txt" ]] || (echo "‚ùå requirements.txt n√£o encontrado na raiz" && exit 1)
        [[ -f ".gitignore" ]] || (echo "‚ùå .gitignore n√£o encontrado na raiz" && exit 1)
        echo "‚úÖ Arquivos essenciais encontrados"

    - name: Validate service structure
      run: |
        echo "Validando estrutura de servi√ßos..."

        # Lista de servi√ßos esperados
        services=("main-app" "clinic-management" "fiscal-analytics" "recycling-system" "landing-page" "mobile")

        for service in "${services[@]}"; do
          echo "Verificando servi√ßo: $service"

          # Verificar se existe
          if [[ ! -d "apps/$service" ]]; then
            echo "‚ùå Servi√ßo $service n√£o encontrado em apps/"
            exit 1
          fi

          # Verificar estrutura b√°sica
          if [[ ! -f "apps/$service/README.md" ]]; then
            echo "‚ö†Ô∏è  Servi√ßo $service n√£o tem README.md"
          fi

          # Verificar requirements.txt (para servi√ßos Django)
          if [[ "$service" != "mobile" ]] && [[ ! -f "apps/$service/requirements.txt" ]]; then
            echo "‚ö†Ô∏è  Servi√ßo Django $service n√£o tem requirements.txt"
          fi

          echo "‚úÖ Servi√ßo $service validado"
        done

    - name: Validate configuration files
      run: |
        echo "Validando arquivos de configura√ß√£o..."

        # Verificar estrutura de pastas essenciais
        required_dirs=("infrastructure" "scripts" "shared" "docs")
        for dir in "${required_dirs[@]}"; do
          if [[ ! -d "$dir" ]]; then
            echo "‚ùå Diret√≥rio essencial $dir n√£o encontrado"
            exit 1
          fi
        done

        echo "‚úÖ Estrutura de diret√≥rios validada"

    - name: Check for security issues
      run: |
        echo "Verificando problemas de seguran√ßa..."

        # Verificar se h√° arquivos .env na raiz (n√£o deve estar versionado)
        if [[ -f ".env" ]]; then
          echo "‚ùå Arquivo .env encontrado na raiz - deve estar no .gitignore"
          exit 1
        fi

        # Verificar se h√° chaves hardcoded
        if grep -r "SECRET_KEY.*=.*[a-zA-Z0-9]" . --include="*.py" --exclude-dir=.git --exclude-dir=node_modules | grep -v "config("; then
          echo "‚ùå Poss√≠vel chave secreta encontrada no c√≥digo"
          exit 1
        fi

        echo "‚úÖ Verifica√ß√£o de seguran√ßa aprovada"

    - name: Validate documentation
      run: |
        echo "Validando documenta√ß√£o..."

        # Verificar documenta√ß√£o essencial
        docs_required=("README.md" "architecture/README.md" "development/README.md" "deployment/README.md" "api/README.md")
        for doc in "${docs_required[@]}"; do
          if [[ ! -f "docs/$doc" ]]; then
            echo "‚ùå Documenta√ß√£o essencial $doc n√£o encontrada"
            exit 1
          fi
        done

        echo "‚úÖ Documenta√ß√£o validada"

    - name: Check code quality
      run: |
        echo "Verificando qualidade do c√≥digo..."

        # Verificar se h√° arquivos Python sem linting b√°sico
        find . -name "*.py" -not -path "./node_modules/*" -not -path "./.git/*" -exec python -m py_compile {} \;

        echo "‚úÖ Qualidade do c√≥digo verificada"

    - name: Structure validation summary
      if: always()
      run: |
        echo "üìä RESUMO DA VALIDA√á√ÉO DE ESTRUTURA"
        echo "=================================="
        echo "‚úÖ Projeto passou em todas as valida√ß√µes cr√≠ticas"
        echo "‚úÖ Estrutura organizada e consistente"
        echo "‚úÖ Arquivos essenciais presentes"
        echo "‚úÖ Configura√ß√µes de seguran√ßa adequadas"
        echo "‚úÖ Documenta√ß√£o completa"
        echo ""
        echo "üéØ Pronto para desenvolvimento e deployment!"
