# Ávila DevOps SaaS - Kubernetes Configuration
# Arquivo principal para deployment no Kubernetes

apiVersion: v1
kind: Namespace
metadata:
  name: aviladevops-saas
  labels:
    name: aviladevops-saas

---
# ConfigMap para configurações da aplicação
apiVersion: v1
kind: ConfigMap
metadata:
  name: saas-config
  namespace: aviladevops-saas
data:
  ENVIRONMENT: "production"
  DEBUG: "False"
  DATABASE_ENGINE: "django.db.backends.postgresql"

---
# Secret para dados sensíveis
apiVersion: v1
kind: Secret
metadata:
  name: saas-secrets
  namespace: aviladevops-saas
type: Opaque
data:
  # Base64 encoded values
  SECRET_KEY: <base64-encoded-secret-key>
  DATABASE_URL: <base64-encoded-db-url>
  EMAIL_HOST_PASSWORD: <base64-encoded-email-password>

---
# Deployment para Landing Page
apiVersion: apps/v1
kind: Deployment
metadata:
  name: landing-page
  namespace: aviladevops-saas
  labels:
    app: landing-page
spec:
  replicas: 3
  selector:
    matchLabels:
      app: landing-page
  template:
    metadata:
      labels:
        app: landing-page
    spec:
      containers:
      - name: landing-page
        image: gcr.io/aviladevops/landing-page:latest
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: saas-config
        - secretRef:
            name: saas-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Service para Landing Page
apiVersion: v1
kind: Service
metadata:
  name: landing-page-service
  namespace: aviladevops-saas
spec:
  selector:
    app: landing-page
  ports:
  - port: 80
    targetPort: 8000
  type: ClusterIP

---
# Deployment para Sistema de Reciclagem
apiVersion: apps/v1
kind: Deployment
metadata:
  name: recycling-system
  namespace: aviladevops-saas
  labels:
    app: recycling-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: recycling-system
  template:
    metadata:
      labels:
        app: recycling-system
    spec:
      containers:
      - name: recycling-system
        image: gcr.io/aviladevops/recycling-system:latest
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: saas-config
        - secretRef:
            name: saas-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"

---
# Service para Sistema de Reciclagem
apiVersion: v1
kind: Service
metadata:
  name: recycling-system-service
  namespace: aviladevops-saas
spec:
  selector:
    app: recycling-system
  ports:
  - port: 80
    targetPort: 8000
  type: ClusterIP

---
# Ingress para roteamento de tráfego
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: saas-ingress
  namespace: aviladevops-saas
  annotations:
    kubernetes.io/ingress.class: "gce"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - "aviladevops.com.br"
    - "*.aviladevops.com.br"
    secretName: aviladevops-tls
  rules:
  - host: "aviladevops.com.br"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: landing-page-service
            port:
              number: 80
  - host: "sistema.aviladevops.com.br"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: recycling-system-service
            port:
              number: 80

---
# PersistentVolumeClaim para dados
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: saas-storage
  namespace: aviladevops-saas
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi

---
# Job para migrações do banco de dados
apiVersion: batch/v1
kind: Job
metadata:
  name: db-migration
  namespace: aviladevops-saas
spec:
  template:
    spec:
      containers:
      - name: migration
        image: gcr.io/aviladevops/recycling-system:latest
        command: ["python", "manage.py", "migrate"]
        envFrom:
        - configMapRef:
            name: saas-config
        - secretRef:
            name: saas-secrets
      restartPolicy: Never

---
# CronJob para backups
apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-backup
  namespace: aviladevops-saas
spec:
  schedule: "0 2 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: gcr.io/aviladevops/backup:latest
            env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: saas-secrets
                  key: DATABASE_URL
          restartPolicy: Never

---
# HorizontalPodAutoscaler para Landing Page
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: landing-page-hpa
  namespace: aviladevops-saas
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: landing-page
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
# NetworkPolicy para segurança
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: saas-network-policy
  namespace: aviladevops-saas
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 5432
