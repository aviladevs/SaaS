#!/bin/bash

# Deploy Multi-Service SaaS - √Åvila DevOps
# Deploy autom√°tico de todos os servi√ßos com subdom√≠nios

set -e

echo "üöÄ Iniciando deploy completo do SaaS √Åvila DevOps..."
echo "================================="

# Configura√ß√µes
PROJECT_ID="principaldevops"
REGION="us-central1"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Fun√ß√£o para verificar se o gcloud est√° configurado
check_gcloud() {
    log_info "Verificando configura√ß√£o do gcloud..."
    
    if ! command -v gcloud &> /dev/null; then
        log_error "gcloud CLI n√£o encontrado. Instale o Google Cloud SDK."
        exit 1
    fi
    
    current_project=$(gcloud config get-value project 2>/dev/null)
    if [ "$current_project" != "$PROJECT_ID" ]; then
        log_warning "Configurando projeto: $PROJECT_ID"
        gcloud config set project $PROJECT_ID
    fi
    
    log_success "gcloud configurado corretamente"
}

# Fun√ß√£o para fazer deploy de um servi√ßo espec√≠fico
deploy_service() {
    local service_name=$1
    local service_path=$2
    local app_yaml_path=$3
    
    log_info "Deploying $service_name..."
    
    if [ ! -f "$app_yaml_path" ]; then
        log_error "app.yaml n√£o encontrado em: $app_yaml_path"
        return 1
    fi
    
    cd "$service_path"
    
    # Verificar se h√° requirements.txt ou package.json
    if [ -f "requirements.txt" ]; then
        log_info "Projeto Python detectado para $service_name"
    elif [ -f "package.json" ]; then
        log_info "Projeto Node.js detectado para $service_name"
    fi
    
    # Deploy
    log_info "Executando deploy do $service_name..."
    if gcloud app deploy "$app_yaml_path" --quiet --version="v$(date +%Y%m%d%H%M)"; then
        log_success "$service_name deployado com sucesso!"
    else
        log_error "Falha no deploy do $service_name"
        return 1
    fi
    
    cd - > /dev/null
}

# Fun√ß√£o principal de deploy
main_deploy() {
    local base_dir="$(pwd)"
    
    # 1. Deploy do servi√ßo principal (default)
    log_info "=== Deploy do App Principal (default) ==="
    deploy_service "App Principal" "$base_dir/app-aviladevops" "$base_dir/app-aviladevops/app.yaml"
    
    # 2. Deploy da Landing Page
    log_info "=== Deploy da Landing Page ==="
    deploy_service "Landing Page" "$base_dir/LANDING-PAGE" "$base_dir/LANDING-PAGE/app.yaml"
    
    # 3. Deploy do Sistema de Gest√£o
    log_info "=== Deploy do Sistema de Gest√£o ==="
    deploy_service "Sistema" "$base_dir/sistema" "$base_dir/sistema/app.yaml"
    
    # 4. Deploy do Sistema Fiscal
    log_info "=== Deploy do Sistema Fiscal ==="
    deploy_service "Fiscal" "$base_dir/fiscal/web_app" "$base_dir/fiscal/web_app/app.yaml"
    
    # 5. Deploy da Cl√≠nica (Next.js)
    log_info "=== Deploy da Cl√≠nica (Next.js) ==="
    deploy_service "Cl√≠nica" "$base_dir/clinica" "$base_dir/clinica/app.yaml"
    
    # 6. Deploy do dispatch.yaml (roteamento de subdom√≠nios)
    log_info "=== Configurando roteamento de subdom√≠nios ==="
    if [ -f "$base_dir/dispatch.yaml" ]; then
        log_info "Deployando dispatch.yaml..."
        gcloud app deploy "$base_dir/dispatch.yaml" --quiet
        log_success "Roteamento de subdom√≠nios configurado!"
    else
        log_warning "dispatch.yaml n√£o encontrado"
    fi
}

# Fun√ß√£o para verificar status dos servi√ßos
check_services_status() {
    log_info "=== Verificando status dos servi√ßos ==="
    
    echo "Listando vers√µes deployadas:"
    gcloud app versions list
    
    echo ""
    echo "Servi√ßos dispon√≠veis:"
    gcloud app services list
    
    echo ""
    echo "URLs dos servi√ßos:"
    echo "üè† Landing Page: https://aviladevops.com.br"
    echo "üöÄ App Principal: https://app.aviladevops.com.br"
    echo "‚öôÔ∏è  Sistema: https://sistema.aviladevops.com.br"
    echo "üìä Fiscal: https://fiscal.aviladevops.com.br"
    echo "üè• Cl√≠nica: https://clinica.aviladevops.com.br"
}

# Fun√ß√£o para limpeza de vers√µes antigas
cleanup_old_versions() {
    log_info "=== Limpeza de vers√µes antigas ==="
    
    # Manter apenas as 3 vers√µes mais recentes de cada servi√ßo
    services=("default" "landing" "sistema" "fiscal" "clinica")
    
    for service in "${services[@]}"; do
        log_info "Limpando vers√µes antigas do servi√ßo: $service"
        
        # Listar vers√µes e manter apenas as 3 mais recentes
        versions=$(gcloud app versions list --service="$service" --sort-by="~version.createTime" --format="value(version.id)" | tail -n +4)
        
        if [ ! -z "$versions" ]; then
            echo "$versions" | while IFS= read -r version; do
                if [ ! -z "$version" ]; then
                    log_warning "Deletando vers√£o antiga: $service/$version"
                    gcloud app versions delete "$version" --service="$service" --quiet || true
                fi
            done
        fi
    done
    
    log_success "Limpeza conclu√≠da!"
}

# Menu principal
show_menu() {
    echo ""
    echo "üöÄ Deploy Multi-Service SaaS - √Åvila DevOps"
    echo "============================================"
    echo "1. Deploy completo (todos os servi√ßos)"
    echo "2. Deploy apenas App Principal"
    echo "3. Deploy apenas Landing Page"
    echo "4. Deploy apenas Sistema"
    echo "5. Deploy apenas Fiscal"
    echo "6. Deploy apenas Cl√≠nica"
    echo "7. Configurar apenas dispatch.yaml"
    echo "8. Verificar status dos servi√ßos"
    echo "9. Limpeza de vers√µes antigas"
    echo "0. Sair"
    echo ""
    read -p "Escolha uma op√ß√£o: " choice
}

# Execu√ß√£o baseada no menu
case "${1:-menu}" in
    "all"|"completo")
        check_gcloud
        main_deploy
        check_services_status
        log_success "Deploy completo finalizado!"
        ;;
    "app")
        check_gcloud
        deploy_service "App Principal" "$(pwd)/app-aviladevops" "$(pwd)/app-aviladevops/app.yaml"
        ;;
    "landing")
        check_gcloud
        deploy_service "Landing Page" "$(pwd)/LANDING-PAGE" "$(pwd)/LANDING-PAGE/app.yaml"
        ;;
    "sistema")
        check_gcloud
        deploy_service "Sistema" "$(pwd)/sistema" "$(pwd)/sistema/app.yaml"
        ;;
    "fiscal")
        check_gcloud
        deploy_service "Fiscal" "$(pwd)/fiscal/web_app" "$(pwd)/fiscal/web_app/app.yaml"
        ;;
    "clinica")
        check_gcloud
        deploy_service "Cl√≠nica" "$(pwd)/clinica" "$(pwd)/clinica/app.yaml"
        ;;
    "dispatch")
        check_gcloud
        gcloud app deploy "$(pwd)/dispatch.yaml" --quiet
        ;;
    "status")
        check_gcloud
        check_services_status
        ;;
    "cleanup")
        check_gcloud
        cleanup_old_versions
        ;;
    "menu")
        while true; do
            show_menu
            case $choice in
                1) 
                    check_gcloud
                    main_deploy
                    check_services_status
                    ;;
                2) 
                    check_gcloud
                    deploy_service "App Principal" "$(pwd)/app-aviladevops" "$(pwd)/app-aviladevops/app.yaml"
                    ;;
                3) 
                    check_gcloud
                    deploy_service "Landing Page" "$(pwd)/LANDING-PAGE" "$(pwd)/LANDING-PAGE/app.yaml"
                    ;;
                4) 
                    check_gcloud
                    deploy_service "Sistema" "$(pwd)/sistema" "$(pwd)/sistema/app.yaml"
                    ;;
                5) 
                    check_gcloud
                    deploy_service "Fiscal" "$(pwd)/fiscal/web_app" "$(pwd)/fiscal/web_app/app.yaml"
                    ;;
                6) 
                    check_gcloud
                    deploy_service "Cl√≠nica" "$(pwd)/clinica" "$(pwd)/clinica/app.yaml"
                    ;;
                7) 
                    check_gcloud
                    gcloud app deploy "$(pwd)/dispatch.yaml" --quiet
                    ;;
                8) 
                    check_gcloud
                    check_services_status
                    ;;
                9) 
                    check_gcloud
                    cleanup_old_versions
                    ;;
                0) 
                    log_info "Saindo..."
                    exit 0
                    ;;
                *) 
                    log_error "Op√ß√£o inv√°lida!"
                    ;;
            esac
            echo ""
            read -p "Pressione Enter para continuar..."
        done
        ;;
    *)
        echo "Uso: $0 [all|app|landing|sistema|fiscal|clinica|dispatch|status|cleanup|menu]"
        echo ""
        echo "Exemplos:"
        echo "  $0 all       # Deploy completo"
        echo "  $0 app       # Deploy apenas do app principal"
        echo "  $0 status    # Verificar status"
        echo "  $0           # Menu interativo"
        exit 1
        ;;
esac